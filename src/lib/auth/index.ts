import { betterAuth } from 'better-auth';
import { drizzleAdapter } from 'better-auth/adapters/drizzle';

import { db } from '@/db';
import { users } from '@/db/schema/users';
import { accounts } from '@/db/schema/accounts';
import { verifications } from '@/db/schema/verifications';
import { sessions } from '@/db/schema/sessions';

export const auth = betterAuth({
  // secrets
  secret: process.env.BETTER_AUTH_SECRET as string,
  url: process.env.BETTER_AUTH_URL as string,
  // db config
  database: drizzleAdapter(db, {
    provider: 'pg',
    schema: {
      user: users,
      account: accounts,
      verification: verifications,
      session: sessions
    }
  }),
  user: {
    additionalFields: {
      providerImage: {
        type: 'string',
        required: false,
        defaultValue: null,
        input: false
      },
      profile: {
        type: 'string',
        required: true,
        defaultValue: JSON.stringify({}),
        input: false
      }
    }
  },
  // email & password config
  emailAndPassword: {
    enabled: true,
    requireEmailVerification: false,
    minPasswordLength: 8,
    maxPasswordLength: 100,
    autoSignIn: true
  },
  // social providers config
  socialProviders: {
    google: {
      clientId: process.env.GOOGLE_CLIENT_ID as string,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,
      prompt: 'select_account consent',
      accessType: 'offline',
      mapProfileToUser: profile => ({
        email: profile.email,
        emailVerified: profile.email_verified,
        name: profile.given_name,
        image: undefined,
        providerImage: profile.picture
      })
    },
    github: {
      clientId: process.env.GITHUB_CLIENT_ID as string,
      clientSecret: process.env.GITHUB_CLIENT_SECRET as string,
      mapProfileToUser: profile => ({
        email: profile.email,
        emailVerified: profile.two_factor_authentication,
        name: profile.name,
        image: undefined,
        providerImage: profile.avatar_url
      })
    }
  },
  advanced: {
    database: {
      generateId: false // uuid will be generated by supabase
    }
  },
  // caching
  session: {
    cookieCache: {
      enabled: true,
      maxAge: 60 // 1 minute
    }
  }
});

export type AuthSession = typeof auth.$Infer.Session;
export type SessionUser = AuthSession['user'];
